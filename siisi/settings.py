"""
Django settings for siisiAi project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import environ
from decouple import config
from pathlib import Path
from django.utils.translation import gettext_lazy as _


# Initialize environment variables
env = environ.Env()
environ.Env.read_env()

# Define the BASE_DIR
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = [
    'siisi.copromanager.pro',
    'www.siisi.copromanager.pro',
    '142.93.235.205', '0.0.0.0', '192.168.230.182',
    '127.0.0.1', config('SERVER', default='127.0.0.1')
]

# To route traffic through OWASP ZAP for testing
PROXY = {
    'http': 'http://127.0.0.1:8080',
    'https': 'http://127.0.0.1:8080',
}

CSRF_TRUSTED_ORIGINS = [
    'https://siisi.copromanager.pro',
    'https://www.siisi.copromanager.pro',
]

# Allow all origins to access the API
# CORS_ALLOW_ALL_ORIGINS = True  # Not recommended for production

# Alternatively, you can specify allowed origins like this:
# CORS_ALLOWED_ORIGINS = [
#     'https://example.com',
#     'https://sub.example.com',
# ]


# Other CORS settings you might use
CORS_ALLOW_CREDENTIALS = True  # Allow cookies and HTTP authentication

# Login URL for authentication redirects
LOGIN_URL = 'two_factor:login'
LOGIN_REDIRECT_URL = 'superuser-views'  # Redirect to your desired page after login
LOGOUT_REDIRECT_URL = 'index'

# Optional: Customize 2FA settings
TWO_FACTOR_PATCH_ADMIN = True  # Apply 2FA to Django admin
TWO_FACTOR_LOGIN_TEMPLATE = 'two_factor/login_register.html'
TWO_FACTOR_QR_FACTORY = 'qrcode.image.pil.PilImage'  # Generates QR codes for authenticator apps

# Optional: Control when users should be redirected to setup
TWO_FACTOR_AUTO_SETUP = False  # If False, users must manually complete the setup

#OTP_EMAIL_SENDER = config("EMAIL_HOST_USER")

# reCAPTCHA settings for v2 and v3
RECAPTCHA_PUBLIC_KEY = config('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = config('RECAPTCHA_PRIVATE_KEY')

RECAPTCHA_REQUIRED_SCORE = 0.85  # For reCAPTCHA v3

# Set secure headers (Optional but recommended for production)
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Ensuring security settings are enforced only in production
SESSION_COOKIE_SECURE = not config('DEBUG', default=True, cast=bool)
CSRF_COOKIE_SECURE = not config('DEBUG', default=True, cast=bool)
SECURE_SSL_REDIRECT = not config('DEBUG', default=True, cast=bool)
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 900  # 15 minutes

# Use production email settings only if DEBUG is False
if not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = config('EMAIL_HOST')
    EMAIL_PORT = config('EMAIL_PORT', cast=int)
    EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
    EMAIL_HOST_USER = config('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Credentials for Openai
OPENAI_API_KEY = api_key=config("OPENAI_API_KEY")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_recaptcha',
    # 2AF Authentication
    'two_factor_auth',
    'django_otp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_email',  # <- if you want email capability.
    #'otp_yubikey',
    'two_factor',
    'two_factor.plugins.phonenumber',  # <- if you want phone number capability.
    'two_factor.plugins.email',  # <- if you want email capability.
    #'two_factor.plugins.yubikey',  # <- for yubikey capability.

    'chatgpt.apps.ChatgptConfig',
    'base.apps.BaseConfig',
    'chat_forum.apps.ChatForumConfig', 

    #'rest_framework',
    #'corsheaders',
]

AUTH_USER_MODEL = 'two_factor_auth.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    #that detects the user's preferred language from their browser settings or session and applies it
    'django.middleware.locale.LocaleMiddleware',
    'siisi.middleware.ThreadLocals',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 2AF Authentication
    'django_otp.middleware.OTPMiddleware',
]

ROOT_URLCONF = 'siisi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # Remove this if you are specifying custom loaders
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'siisi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

#DATABASES = {
#    'default': env.db('DATABASE_URL'),
#}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGES = [
    ('en', _('English')),
    ('fr', _('French')),
    ('es', _('Spanish')),
    ('pt', _('Portuguese')),
]

# Set the directory for translation files
LOCALE_PATHS = [
    #'/Users/lesanebyby/Desktop/siisi/locale',
    os.path.join(BASE_DIR, 'locale'),
    os.path.join(BASE_DIR, 'env', 'lib', 'python3.12', 'site-packages', 'two_factor', 'locale')  # two_factor app's locale folder
]

LANGUAGE_CODE = 'en'  # Default language
LANGUAGE_COOKIE_NAME = 'django_language'  # Default is 'django_language'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'

# URL to access media files (user uploads)
#MEDIA_URL = '/media/'

# This is the directory where Django will collect static files during deployment.
#STATIC_ROOT = BASE_DIR / 'staticfiles'  # Create a 'staticfiles' directory in your project root for collected files.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Use whitenoise to serve static files in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Directory for additional static files not in app directories
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # This is for static files you want to use in development.
]

# Media files (Uploaded by users)
MEDIA_URL = '/media/'

# This is where uploaded media files will be stored.
MEDIA_ROOT = BASE_DIR / 'static/images'
#MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
